****** PRIVATE SERVER ******
/login (POST) "Return an access token for a user."

/sizes/ (GET) "Return a list with all the sizes in ther server"
/sizes/details/:sizeId (GET) "Return a size whose ID is passed by parameter"
/sizes/create (POST) "The private server receive the data to create a new size"
/sizes/delete/:sizeId (DELETE) "The private server receive the ID of the size to delete"
/sizes/update/:sizeId (PUT) "The private server receive the ID and the data of the size to update"

/instances/ (GET) "Return a list with all the instances in ther server"
/instances/details/:instanceId (GET) "Return a instance whose ID is passed by parameter"
/instances/create (POST) "The private server receive the data to create a new instance"
/instances/delete/:instanceId (DELETE) "The private server receive the ID of the instance to delete"
/instances/update/:instanceId (PUT) "The private server receive the ID and the data of the instance to update"

/images/ (GET) "Return a list with all the images in ther server"
/images/details/:imageId (GET) "Return a image whose ID is passed by parameter"
/images/create (POST) "The private server receive the data to create a new image"
/images/delete/:imageId (DELETE) "The private server receive the ID of the image to delete"
/images/update/:imageId (PUT) "The private server receive the ID and the data of the image to update"

/applications/ (GET) "Return a list with all the applications in ther server"
/applications/ (POST) "Create an application in the server"
/applications/:applicationId (GET) "Return an application data, ID is passed by parameter"
/applications/:applicationId (PUT) "Update an existing application whose ID is passed by parameter"
/applications/:applicationId (POST) "Execute an operation on an existing application whose ID is passed by parameter"
/applications/:applicationId (DELETE) "Delete an existing application whose ID is passed by parameter""

/experiments/ (GET) "Return a list with all the experiments in ther server"
/experiments/ (POST) "Create an experiment in the server"
/experiments/:experimentId (GET) "Return an experiment data, ID is passed by parameter"
/experiments/:experimentId (PUT) "Update an existing experiment whose ID is passed by parameter"
/experiments/:experimentId (DELETE) "Delete an existing experiment whose ID is passed by parameter"
/experiments/:experimentId (POST) "Perform an operation on an experiment. Instant return, experiment must be pulled with GET to obtain status."

/experiments/:experimentId?exec="id" (ANY) "Select an execution."

/experiments/:experimentId/logs (GET) "Return experiment logs, ID is passed by parameter"
/experiments/:experimentId/logs?log=COMPILATION_LOG (GET) "Return experiment log as plain text if exists"

/experiments/:experimentId/download?file=archive/rest/exp.nc (GET) "Download experiment output data, ID is passed by parameter"

/experiments/:experimentId/code?file=src/code.c (GET) "Return code file content as plain text"
/experiments/:experimentId/code?file=src/code.c (DELETE) "Remove code file from experiment"
/experiments/:experimentId/code?file=src/code.c (POST) "Save changes to file."

/experiments/:experimentId/input?file=atm/cloud.nc (DELETE) "Delete input file from experiment"
/experiments/:experimentId/input?file=atm/cloud.nc (POST) "Upload input file to experiment"

/experiments/:experimentId/srctree?folder=models/atm/src&depth=1 (GET) "Return filesystem tree from sources folder. Depth of the filesystem can be provided."
/experiments/:experimentId/inputtree?folder=models/atm/src&depth=1 (GET) "Return filesystem tree from input folder. Depth of the filesystem can be provided."
/experiments/:experimentId/outputtree?folder=models/atm/src&depth=1 (GET) "Return filesystem tree from output folder. Depth of the filesystem can be provided."

/experiments/:experimentId/executions (GET) "Return a list with all the executions in the server"

/users/ (GET) "Return a list with all the users in ther server (ADMIN)"
/users/ (POST) "Create a user (ADMIN)"
/users/:userId (GET) "Return user metadata (ADMIN for other users)"
/users/:userId/permissions (PUT) "Setup user permissions (ADMIN)"
